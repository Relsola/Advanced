// 将重复使用的代码封装到一个类中，在需要使用的地方调用。

// 普通混合 ---------------------------------
.getBG(@picName) {
    background-image: url('/static/module/class/content/img/@{picName}');
    background-size: 100%;
    background-position: center;
}

#header {
    .getBG(01.png)
}

.ellipsis(@rows) {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: @rows;
    -webkit-box-orient: vertical;
}


// 参数混合 ---------------------------------------
// 定义混合
.border(@border_color) {
    border: 2px solid @border_color;
}

// 使用混合
.div {
    .border(#f60);
    // 使用时我们需要传入一个参数进去
}



// 参数默认值 ------------------------------------
// 定义混合
.border(@border_color: #f60; ) {
    border: 2px solid @border_color;
}

// 使用混合
.div {
    .border();
}



// 条件混合 -----------------------------------
// Less 没有 if else，可是它有 when
// and 运算符 ，相当于 与运算 &&，必须条件全部符合才会执行
.border(@width, @color, @style) when (@width>100px) and(@color=#999) {
    border: @style @color @width;
}



// 循环方法 ----------------------------------
/* Less */
.generate-columns(4);

.generate-columns(@n, @i: 1) when (@i =< @n) {
    .column-@{i} {
        width: (@i * 100% / @n);
    }

    .generate-columns(@n, (@i + 1));
}

/* 生成后的 CSS */
.column-1 {
    width: 25%;
}

.column-2 {
    width: 50%;
}

.column-3 {
    width: 75%;
}

.column-4 {
    width: 100%;
}