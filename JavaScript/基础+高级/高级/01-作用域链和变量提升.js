/* 
代码段：
  一个页面里面可以引入多个代码段
  一个script标签就是一个代码段
  代码段相互独立（代码的出错会阻塞当前代码段下面的代码执行）并不影响
  靠前的代码段声明的变量后面的代码段可以使用
  靠后的代码段声明的变量后面的代码段无法使用


作用域链：
  一个变量的作用范围就是作用域
  找不到变量的时候往外找 外指的是定义时的外面

预解析：
  浏览器在执行JS代码的时候，会分成2部分进行操作，预编译和逐步执行代码
  预编译：用var声明的变量会提升，用function声明的也会提升
  提升是以函数为界限。提升不可能提升到函数外面


同步和异步：
  JS代码分两种：同步代码  异步代码
    同步代码就是我们正常书写的 从上往下依次执行的代码
    异步代码：事件绑定 定时器 promise ajax
    异步代码就是我们需要他执行的时候，他才执行
    异步代码在同步代码之后执行


JS 中执行上下文
  代码执行前，浏览器的Js引擎先会创建代码执行的环境来处理此Js代码的转换和执行，代码的执行环境称为执行上下文。
  执行上下文是一个抽象概念，包含当前正在运行的代码以及帮助其执行的所有内容。
  执行上下文主要分为三类：
    1. 全局执行上下文 —— 全局代码所处的环境，不在函数内部代码都在全局执行。
    2. 函数执行上下文 —— 在函数调用时创建的上下文。
    3. Eval执行上下文 —— 运行在Eval函数中代码时创建的环境，Eval由于性能问题在我们平时开发中很少用到，所有这里我们不在讨论。
    
  全局执行上下文：
    1. 将window作为全局执行上下文对象
    2. 创建this，this 指向window
    3. 给变量和函数安排内存空间
    4. 变量赋值undefined，函数声明放入内存
    5. 放入作用域链
  全局与函数执行上下文不同：
    1. 全局：在文件执行前创建；函数：在函数调用时创建
    2. 全局：只创建一次；函数：调用几次创建几次
    3. 将window作为全局对象；函数：创建参数对象arguments，this指向调用者

    
闭包：
  一个本该被销毁的变量内存空间 ，由于外部的引用导致其无法被销毁，那么他就会形成闭包
    延长了变量的生命周期 扩大了变量的作用范围 保护了变量
    但会造成内存泄露
    节流、防抖就是利用了闭包
  常见应用：
    模拟私有变量  柯里化  偏函数  防抖 节流
  常见的内存泄漏：
    全局变量  遗忘清理的计时器  遗忘清理的dom元素引用


高阶函数：
   当一个函数 如果它的参数是函数 或者它的返回值是函数 那么我们叫这个函数为高阶函数
   ob 2进制  0o 8进制  0x 16进制 00开头 8进制
   浏览器打印其他进制的数据时，会自动的帮你转换成10进制
*/