/*
  当一个函数被调用时，会创建一个执行上下文，其中this就是执行上下文的一个属性，this是函数在调用时JS引擎向函数内部传递的一个隐含参数


  this指向完全是由它的调用位置决定，而不是声明位置。除箭头函数外，this指向最后调用它的那个对象
    1. 全局作用域中，无论是否严格模式都指向window/global
    2. 普通函数调用，指向window/global，严格模式下指向undefined
    3. 对象方法使用，该方法所属对象
    4. 构造函数调用，指向实例化对象
    5. 匿名函数中，指向window/global
    6. 计时器中，指向window/global
    7. 事件绑定方法，指向事件源
    8. 箭头函数指向其上下文中this
    9. call bind apply 取决于参数
    10. 内置的高级函数 取决于参数


  this的绑定：
    1. 默认绑定  当一个函数独立调用的时候 this指向是window/global
    2. 隐式绑定  对于对象使用方法 this隐式绑定该对象
    3. 显示绑定  call bind apply
    4. new绑定  显示绑定优先级高于隐式绑定  new优先级别高于隐式
*/


/* 
  call、apply、bind
    1. call、apply和bind，都是用来改变this指向的，三者是属于大写 Function原型上的方法，只要是函数都可以使用。
    2. call和apply的区别，体现在对入参的要求不同，call的实参是一个一个传递，apply的实参需要封装到一个数组中传递。
    3. call、apply相比bind方法，函数不会执行，所以我们需要定义一个变量去接收执行。
*/


/* 
  new运算符
    1.在构造器函数内部创建了一个对象
    2.把构造器内部的this指向了这个对象
    3.执行函数
    4.返回了这个对象

  返回值情况
    1.如果构造器函数返回的是基本数据类型，外边得到的是新创建的对象
    2.如果构造器函数返回的是引用数据类型，外边得到的是构造器函数返回值

  私有属性和共有属性
    针对于类来说的 不是针对于对象来说
    私有是指 只能在构造器内部访问的属性
*/