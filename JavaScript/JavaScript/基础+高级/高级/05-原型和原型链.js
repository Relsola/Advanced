/* 

    一切都是对象
    属性分共有和私有
    每一个对象身上都有一个隐式原型__proto__
    每一个构造器身上都有一个prototype 显示原型
    一个对象的隐式原型和其构造器对应的显示原型指向的是一样的
    每一个原型对象都有一个叫constructor 指向构造器
*/


/* 
    为什么要有原型？
    构造函数中的实例每调用一次方法，就会在内存中开辟一块空间，从而造成内存浪费
    在函数对象中，有一个属性prototype，它指向了一个对象，这个对象就是原型对象
    这个对象的所有属性和方法，都会被构造函数所拥有
  
    普通函数调用，prototype没有任何作用
    构造函数调用，该类所有实例有隐藏一个属性（proto）指向函数的prototype
    实例的隐式原型指向类的显示原型
    原型就相当于一个公共区域，可以被类和该类的所有实例访问到

    优点:
      资源共享，节省内存；改变原型指向，实现继承
    缺点：
      查找数据的时候有的时候不是在自身对象中查找。
*/


/* 
  原型链:实际上是指隐式原型链,从对象的__proto__开始，连接所有的对象，就是对象查找属性或方法的过程。

  1. 当访问一个对象属性时，先往实例化对象在自身中寻找，找到则是使用。
  2. 找不到（通过_proto_属性）去它的原型对象中找，找到则是使用。
  3. 没有找到再去原型对象的原型（Object原型对象）中寻找，直到找到Object为止，如果依然没有找到，则返回undefined。
*/